#include <iostream>


#include "score_table.h"
#include "board.h"

double macro_score_table[1<<18];

double micro_win_prob[1<<18];
double micro_lose_prob[1<<18];

int reg_cell_score_int[9*9];
int reg_cell_bias_int;
int reg_turn_coef_int;

extern double cell_score [9*9];
extern double reg_cell_bias;
extern double reg_turn_coef;

// double cell_score [9*9] = {
  // +41
  //  0.75258430, 0.71865556,-0.48625118, 0.70279532,
  // -0.30602532,-0.03834203,-0.76526373, 0.04045685,
  //  0.12602348,-0.20369955,-0.69703013,-0.83783892,
  // -0.36743418,-0.87092533,-0.12345948,-0.31132035,
  // -0.13242059, 0.49235975,-0.01657033, 0.24705828,
  //  0.08749625,-0.28738834, 0.51321299, 0.01453005,
  // -0.23329236, 0.32136043, 0.59064964, 0.45136191,
  // -0.29984328, 0.06645361,-0.13619749,-0.05529810,
  // -0.11382633, 0.08938200,-0.16075615, 0.83833204,
  // -0.53967223, 0.02025088, 0.16933006,-0.03338589,
  //  0.13096868, 0.19854530, 0.30511823, 0.14292927,
  // -0.22101272,-0.36262460, 0.05761797,-0.10612649,
  //  0.25920307, 0.16989934, 0.26771048, 0.94792984,
  //  0.32709618, 0.38761059,-0.37469596, 0.71537409,
  // -0.40681474,-0.42834780, 0.32504883, 0.22060762,
  // -0.73482942,-0.71341438, 0.46436534, 0.19170091,
  // -0.13212128, 0.77568484,-0.09737581, 0.08627749,
  //  0.00015503,-0.14226879,-0.09234413, 0.13978162,
  // -0.03911623, 0.41397220, 0.65280305, 0.73456486,
  // -0.69190260, 0.18417232,-0.25598289, 0.03150678,
  //  0.31412925,

  //  Base(./toebot-vanilla):43 Test(./toebot):160 Draws:315 Total:518 Score:61.3±2.5% Rating:+80
  // -0.06009773, 0.04590983, 0.08071016, 0.54504213,
  // -0.11697085,-0.44529016,-0.43405743, 0.07968344,
  // -0.13464969, 0.15888520,-0.37302488,-0.47722104,
  //  0.13109669,-1.21657433, 0.36752716,-0.07675996,
  //  0.12269584,-0.02869565,-0.41321410, 0.15195615,
  // -0.21381283, 0.28616992, 0.65869503, 0.61095806,
  //  0.16580725,-0.31504878, 0.02358666, 0.55089552,
  // -0.25484288, 0.14116337, 0.06181424, 0.13284907,
  // -0.80632959, 0.25534612,-0.32287368, 0.56880082,
  // -0.03051008, 0.25421832,-0.20765697, 0.49914270,
  //  0.48096409,-0.04348376,-0.68907138,-0.29041270,
  // -0.06721895,-0.02885553, 0.04400126,-0.28121437,
  //  0.02201525, 0.49475255, 0.05323116, 0.51537169,
  //  0.41581795, 0.49729562, 0.00829402, 0.19328526,
  // -0.70997804,-0.17104109,-0.09636432, 0.33991152,
  // -0.54886409,-0.48041494, 0.62429715, 0.35295210,
  //  0.35305288, 0.42503014,-0.02743610,-0.33173102,
  //  0.05220332,-0.32612596, 0.16178389, 0.26038349,
  // -0.05637740,-0.51758401, 0.24692510, 0.65143694,
  // -0.25672305,-0.06708090, 0.07893625, 0.11491753,
  //  0.01470733,

  // Base(./toebot-vanilla):31 Test(./toebot):231 Draws:223 Total:485 Score:70.6±2.7% Rating:+152
  // -0.09866529,-0.09491203,-0.03831214, 0.60856920,
  // -0.04650917,-0.51596337,-0.51903748,-0.05097493,
  // -0.28592904, 0.20618234,-0.36092991,-0.25935249,
  //  0.26183658,-1.15259841, 0.24763546,-0.39093804,
  //  0.30316555,-0.17137184,-0.45664104, 0.29515366,
  // -0.03202164, 0.26499037, 0.71479939, 0.67133446,
  //  0.06957090,-0.50637776, 0.39902383, 0.27656760,
  // -0.37003832, 0.25326701, 0.06591885, 0.37180026,
  // -0.57386269, 0.37545480,-0.12232728, 0.31484662,
  //  0.16983872, 0.30875576,-0.18867530, 0.64427186,
  //  0.71298634, 0.13783460,-0.50109761,-0.29568846,
  //  0.19279368,-0.03896737,-0.18372185,-0.22215662,
  // -0.18046174, 0.75290883,-0.06417470, 0.39609597,
  //  0.32720509, 0.62633176,-0.21631491, 0.18821511,
  // -0.51887011,-0.18002945,-0.39131849, 0.30315663,
  // -0.47873371,-0.58034727, 0.39725477, 0.39084953,
  //  0.37611315, 0.04936333, 0.21028300,-0.15089069,
  //  0.02915919,-0.60016550,-0.00044862, 0.20496467,
  // -0.00281376,-0.48811935, 0.29369305, 0.48558962,
  // -0.22970745,-0.01330719,-0.10483609, 0.00725125,
  //  0.06933130,


  // Base(./toebot-vanilla):23 Test(./toebot):176 Draws:53 Total:252 Score:80.4±4.0% Rating:+245
  // -0.24206823, 0.04274534, 0.16690643, 0.36813760,
  // -0.12296224,-0.17154056,-0.61208993,-0.21467209,
  // -0.04911865, 0.26330156,-0.21272507,-0.41123427,
  //  0.47357006,-1.07105865, 0.45420354,-0.40220368,
  //  0.44760024,-0.21087120,-0.19096183, 0.11589532,
  // -0.23951059, 0.22847336, 0.71319517, 0.24304872,
  // -0.02294357,-0.29178143, 0.50267936, 0.06706877,
  //  0.12347865, 0.30335093, 0.07348156, 0.07813590,
  // -0.26157756, 0.06097422,-0.06374932, 0.00797120,
  //  0.16493795, 0.01012291,-0.13930986, 0.36948985,
  //  0.61601398,-0.07793052,-0.50241534,-0.35067709,
  //  0.01024236, 0.03690561,-0.05143001,-0.32425733,
  // -0.12876465, 0.37955498, 0.18698933, 0.20559287,
  //  0.41819607, 0.55253863,-0.12398123, 0.29908725,
  // -0.45399272, 0.04462166,-0.54933492, 0.29630938,
  // -0.68813264,-0.61502800, 0.18047864, 0.18453899,
  //  0.42715648, 0.20539324, 0.10925075,-0.12312346,
  //  0.31236163,-0.61413204,-0.18383971, 0.28130118,
  //  0.12908390,-0.58028979, 0.07717310, 0.17376403,
  //  0.14509191, 0.20768449, 0.08215218, 0.03682770,
  // -0.06044208,


  // -0.03285542, 0.02463208,-0.08526915, 0.03896615,
  //  0.00573519, 0.18651064,-0.04737076,-0.02417457,
  //  0.03394930,-0.05854405,-0.05787390, 0.03678103,
  // -0.09732340,-0.08888403,-0.00941097, 0.10222732,
  // -0.01303159, 0.05064311,-0.04737081, 0.03896668,
  // -0.03285545,-0.02417438, 0.00573564, 0.02463199,
  //  0.03394971, 0.18651284,-0.08526915, 0.03678136,
  // -0.00941078, 0.05064335,-0.05787392,-0.08888434,
  // -0.01303137,-0.05854396,-0.09732343, 0.10222731,
  // -0.03615568, 0.07399173,-0.03615518, 0.07399178,
  //  0.00013693, 0.07399253,-0.03615519, 0.07399266,
  // -0.03615387, 0.10222729,-0.09732345,-0.05854382,
  // -0.01303156,-0.08888403,-0.05787391, 0.05064316,
  // -0.00941166, 0.03678123,-0.08526916, 0.18651088,
  //  0.03394963, 0.02463223, 0.00573563,-0.02417403,
  // -0.03285562, 0.03896651,-0.04737134, 0.05064376,
  // -0.01303139, 0.10222733,-0.00941183,-0.08888403,
  // -0.09732340, 0.03678161,-0.05787395,-0.05854401,
  //  0.03394786,-0.02417395,-0.04737085, 0.18651091,
  //  0.00573552, 0.03896708,-0.08526906, 0.02463201,
  // -0.03285541,

  // };

// double reg_cell_bias = 0.74142277;

static const double probs[4] = {
  0, 0.5, 0.5, 0.00,
};

double ComputeMacroScore(int board) {
  int denominator = 0;

  int8_t decoded[9];
  DecodeBoard(decoded, board);

  for (int i = 0; i < 9; i++) {
    if (decoded[i] == 0) {
      denominator += 1;
    }
  }

  if (isDone(decoded, 1)) {
    return 1;
  }
  if(isDone(decoded, 2)) {
    return -1;
  }
  if(isFull(decoded)) {
    return 0;
  }

  double score = 0;
  double reciprocal = 1.0 / double(denominator);
  for (int i = 0; i < 9; i++) {
    for (int p = 1; p < 4; p++) {
      if (decoded[i] != 0) {
        continue;
      }
      int code = board | (p << (i * 2));
      score += macro_score_table[code] * reciprocal * probs[p];
    }
  }
  return score;
}

double ComputeProb(int board, int player, double* table) {
  int denominator = 0;

  int8_t decoded[9];
  DecodeBoard(decoded, board);

  for (int i = 0; i < 9; i++) {
    if (decoded[i] == 3) {
      return 0;
    }
    if (decoded[i] == 0) {
      denominator += 1;
    }
  }

  if (isDone(decoded, player)) {
    return 1;
  }
  if(isDone(decoded, 3-player) || isFull(decoded)) {
    return 0;
  }

  double score = 0;
  for (int i = 0; i < 9; i++) {
    for (int p = 1; p < 3; p++) {
      if (decoded[i] != 0) {
        continue;
      }
      int code = board | (p << (i * 2));
      score += table[code] * 0.5 / double(denominator);
    }
  }
  return score;
}

void InitScoreTable() {
  for (int i = (1<<18) - 1; i >= 0; i--) {
    macro_score_table[i] = ComputeMacroScore(i);
    micro_win_prob[i] = ComputeProb(i, 1, micro_win_prob);
    micro_lose_prob[i] = ComputeProb(i, 2, micro_lose_prob);
  }

  for (int i = 0; i < 9*9; i++) {
    reg_cell_score_int[i] = int(cell_score[i] * score_factor + 0.5);
  }
  reg_cell_bias_int = int(reg_cell_bias * score_factor + 0.5);
  reg_turn_coef_int = int(reg_turn_coef * score_factor + 0.5);
}
